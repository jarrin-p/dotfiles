#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can{{{{{{
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#}}}
#  NOTE(koekeishiya): A mode is declared according to the following rules:{{{
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.}}}
# add an on_enter command to the default mode{{{
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app}}}
# application specific bindings{{{
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]}}}
# specify a file that should be included as an additional config-file.{{{
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"}}}
# prevent skhd from monitoring events for specific applications.{{{
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]}}}}}}

# default is now interact mode accessed with "i"
:: default
:: spaces @
:: navigate @
:: displays @
:: apps @

# mode switches
default, navigate, spaces, displays, apps < shift - escape ; navigate

# interact mode via `i`
navigate, spaces, displays, apps < i ; default

# switch between different types of management modes
# `navigate` is also a general navigation mode. spaces is for managing the space
spaces, displays < w ; navigate
navigate, displays < s ; spaces
navigate, spaces < d ; displays

# navigate in a space
navigate < shift - n : yabai -m window --focus prev
navigate < n : yabai -m window --focus next
# navigate < h : yabai -m window --focus west{{{
# navigate < l : yabai -m window --focus east
# navigate < j : yabai -m window --focus south
# navigate < k : yabai -m window --focus north}}}

# new window
navigate < return : skhd -k "cmd - n"
navigate < cmd - n -> : skhd -k "" # empty remap to allow passthrough of keypress

navigate < tab : yabai -m window --focus stack.next
navigate < shift - tab : yabai -m window --focus stack.prev

navigate < q : skhd -k "cmd - w" ; # yabai -m window --focus largest navigate < cmd - w -> : shkd -k "" # empty remap to allow passthrough of keypress
navigate < cmd - w -> : skhd -k ""

# navigate spaces - note that focus first / last doesn't include floating windows, only tiled
# with sa-addon
# navigate < 0x21 : yabai -m space --focus prev #; yabai -m window --focus first # left bracket
# navigate < 0x1E : yabai -m space --focus next #; yabai -m window --focus first # right bracket
#navigate < r : yabai -m space --layout bsp # resets layout, using modifier to prevent accidental reset
navigate < r : yabai -m window --toggle split

# no sa-addon
# navigate spaces
navigate < 0x21 : skhd -k "cmd - h" ; #; yabai -m window --focus first # left bracket
navigate < cmd - h -> : skhd -k ""
navigate < 0x1E : skhd -k "cmd - l" ; #; yabai -m window --focus first # right bracket
navigate < cmd - l -> : skhd -k ""

# rotate the window tree
# open app finder. starts interact mode via key press, then opens zsh function
# navigate < o : skhd -k "i" ; \
#     /usr/local/bin/kitty/kitty.app/contents/MacOS/kitty \
#     --single-instance \
#     zsh -c --interactive --login "app" ;

navigate < cmd - return : skhd -k "i" ; kitty --single-instance

# Resize windows based on parent/child positioning
navigate < 0x2F : yabai -m window --ratio rel:0.05 # '.' keycode
navigate < 0x2B : yabai -m window --ratio rel:-.05 # ',' keycode

# tests
# navigate < f : yabai -m window --toggle float
# navigate < shift - j : yabai -m window --toggle sticky
# navigate < e : yabai -m window --toggle expose # show all windows from an application
#
# rearrange windows
spaces < shift - n : yabai -m window --swap prev
spaces < n : yabai -m window --swap next
# spaces < h : yabai -m window --swap west{{{
# spaces < l : yabai -m window --swap east
# spaces < j : yabai -m window --swap south
# spaces < k : yabai -m window --swap north}}}

# insert windows in a space
# spaces < alt - h : yabai -m window --insert west{{{
# spaces < alt - l : yabai -m window --insert east
# spaces < alt - j : yabai -m window --insert south
# spaces < alt - k : yabai -m window --insert north}}}

# stack windows in a space; selected window consumes direction
spaces < h : yabai -m window --stack prev
spaces < l : yabai -m window --stack next
# spaces < cmd - h : yabai -m window --stack west{{{
# spaces < cmd - l : yabai -m window --stack east
# spaces < cmd - j : yabai -m window --stack south
# spaces < cmd - k : yabai -m window --stack north}}}

# unstack windows
spaces < r : yabai -m space --rotate 90
spaces < shift - r : yabai -m space --rotate 270
spaces < shift - h : yabai -m window --warp prev
spaces < shift - l : yabai -m window --warp next
# spaces < ctrl - h : yabai -m window --warp west{{{
# spaces < ctrl - l : yabai -m window --warp east
# spaces < ctrl - j : yabai -m window --warp south
# spaces < ctrl - k : yabai -m window --warp north}}}

# Send to prev/next space and follow it
# left bracket - send to prev space -- not sure why multi line is not working
spaces < 0x21 : yabai -m window --space prev ; yabai -m space --focus prev

# right bracket - send to next space -- not sure why multi line is not working
spaces < 0x1E : yabai -m window --space next ; yabai -m space --focus next 
spaces < f : yabai -m space --layout float
spaces < s : yabai -m space --layout stack
spaces < b : yabai -m space --layout bsp

# create new space
spaces < return : yabai -m space --create # '.' keycode

# right bracket - send to prev display
displays < 0x21 : yabai -m window --display prev ; skhd -k "cmd - h"
# left bracket - send to next display
displays < 0x1E : yabai -m window --display next ; skhd -k "cmd - l"
# change displays
displays < n : yabai -m display --focus next
displays < shift - n : yabai -m display --focus prev


# mode enhancements{{{
# [x] navigate: use next, prev on n, N instead of cardinal movement on hjkl and remap hjkl to app specific navigation
# [ ] navigate: switch between stacked window and bsp modes
# [ ]   query space to determine mode, adjust hotkey based on it
# [ ] navigate: zoom full screen (might be duplicate of switching between stacked and bsp modes)
# [ ] navigate: show all stacked windows
# [ ] navigate: scrolling up and down through terminal using terminal mode
#
# [ ] navigate, spaces: float mode (manage floating windows ... ?)
#
# [ ] spaces: create
# [ ] spaces: delete
# [ ] spaces: rearrange (move left, right)
# [ ] spaces: naming
# [ ]   show title in status bar
# [x] spaces: focus follows moved window to different space
#
# [x] displays: actually make mode
# [ ] displays: improved navigation
# [ ] displays: pop some hotkeys? -- me again, what does this mean?
#
# app specific functionality
# [ ] navigate safari AT LEAST
# [ ]   tab navigation
# [ ]   vertical scrolling
# [ ] messages app navigation
# [ ]   change recipient
# [ ]   search
# [ ]   scroll up current message
# [x] kittyconf: navigating terminal lines
# [ ] kitty: run last command
# [ ] kitty/nvim: save all open nvim
# [ ] shared buffer list between kitty windows
#
# other stuff
# [ ] pin specific app as status bar
# [ ] show app names via query in like top right.
# [ ] basic layout
# [x]   mode:                     space:                      tab stack }}}

# vim:fdm=marker:foldlevel=0
